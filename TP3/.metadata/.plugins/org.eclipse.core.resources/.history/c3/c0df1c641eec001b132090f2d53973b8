#include <stdio.h>
#include <stdlib.h>
#include "Controller.h"
#include "parser.h"



/**\brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee)
{

	int retorno=-1;
	FILE* fpArchivo;
	char auxNombre[NOMBRE_TAM];
	char auxHoras[100];
	char auxId[100];
	char auxSueldo[100];

	if(pArrayListEmployee!=NULL && path!=NULL)
	{
		fpArchivo=fopen(path,"r");
		if(fpArchivo!=NULL)
		{
			retorno=0;
			parser_EmployeeFromText(fpArchivo, pArrayListEmployee, auxId, auxNombre, auxHoras, auxSueldo);
		}
		fclose(fpArchivo);
	}
	return retorno;
}

/** \brief Carga los datos de los empleados desde el archivo data.bin (modo binario).
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee)
{
	int retorno=-1;
	FILE* fpArchivo;
	Employee* auxEmpleado=NULL;

	if(pArrayListEmployee!=NULL && path!=NULL)
	{
		fpArchivo=fopen(path,"rb");

		if(fpArchivo!=NULL)
		{
			retorno=0;
			parser_EmployeeFromBinary(fpArchivo,pArrayListEmployee,auxEmpleado);

		}
		fclose(fpArchivo);
	}

	return retorno;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee,int* pId)
{
	int retorno=-1;
	Employee* auxEmpleado;
	char auxNombre[NOMBRE_TAM];
	float auxHorasTrabajadas;
	float auxSueldo;


	if(pArrayListEmployee!=NULL && pId!=NULL)
	{
		if(!utn_getCadena(auxNombre,NOMBRE_TAM,"\nIngrese nombre:","\nError,nombre no valido",2) &&
		   !utn_getNumeroFlotante(&auxHorasTrabajadas, "\nIngrese Horas trabajadas:", "\nError,horas no validas",1, 1000000, 2) &&
		   !utn_getNumeroFlotante(&auxSueldo, "\nIngrese Sueldo:", "\nError,sueldo no valido",1, 1000000, 2))
		{
			auxEmpleado=employee_newParametros(*pId, auxNombre, auxHorasTrabajadas, auxSueldo);
			if(auxEmpleado!=NULL)
			{
				ll_add(pArrayListEmployee, auxEmpleado);
				 (*pId)++;
				 retorno=0;
			}
		}
	}

	return retorno;
}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee, int auxId)
{
	int retorno=-1;
	int indiceModificar;
	Employee* auxEmpleado;
	int buffer;
	char auxNombre[NOMBRE_TAM];
	float auxHoras;
	float auxSueldo;



	if(pArrayListEmployee!=NULL && auxId>=0)
	{
		for(int i=0;i<ll_len(pArrayListEmployee);i++)
		{
			auxEmpleado=(Employee*)ll_get(pArrayListEmployee, i);
			employee_getId(auxEmpleado,&buffer);
			if(buffer==auxId)
			{
				indiceModificar=i;
				break;
			}
		}

		if(indiceModificar>=0)
		{
			if(!utn_getCadena(auxNombre,NOMBRE_TAM,"\nIngrese nombre:","\nError,nombre no valido",2) &&
			   !utn_getNumeroFlotante(&auxHoras, "\nIngrese horas trabajadas:", "\nError,horas  no valida",1, 1000000, 2) &&
			   !utn_getNumeroFlotante(&auxSueldo, "\nIngrese sueldo:", "\nError,sueldo  no valido",1, 1000000, 2) )
			{

				employee_setNombre(auxEmpleado, auxNombre);
				employee_setHorasTrabajadas(auxEmpleado, auxHoras);
				employee_setSueldo(auxEmpleado, auxSueldo);

			}
			ll_set(pArrayListEmployee, indiceModificar,(Employee*) auxEmpleado);
			retorno=0;
		}
	}
	return retorno;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee, int auxId)
{
	int retorno=-1;
	int indiceBorrar;
	Employee* auxEmpleado;
	int buffer;
	if(pArrayListEmployee!=NULL && auxId>=0)
	{
		for(int i=0;i<ll_len(pArrayListEmployee);i++)
		{
			auxEmpleado=(Employee*)ll_get(pArrayListEmployee, i);
			employee_getId(auxEmpleado,&buffer);
			if(buffer==auxId)
			{
				indiceBorrar=i;
				break;
			}
		}

		if(indiceBorrar>=0)
		{
			ll_remove(pArrayListEmployee, indiceBorrar);
		    retorno=0;
		}
	}

	return retorno;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
	int retorno=-1;
	int i;
	Employee* auxEmpleado;
	int auxId;
	char auxNombre[NOMBRE_TAM];
	float auxHoras;
	float auxSueldo;

	if(pArrayListEmployee!=NULL)
	{
		printf("\n----------LISTA EMPLEADOS-------------\n");
		for(i=0;i<ll_len(pArrayListEmployee);i++)
		{
			auxEmpleado=(Employee*)ll_get(pArrayListEmployee, i);

			if(!employee_getId(auxEmpleado,&auxId) &&
			   !employee_getNombre(auxEmpleado,auxNombre) &&
			   !employee_getHorasTrabajadas(auxEmpleado,&auxHoras) &&
			   !employee_getSueldo(auxEmpleado,&auxSueldo))
			{
				printf("ID: %d - Nombre: %s - Horas Trabajadas: %.2f - Sueldo: %.2f\n",auxId,auxNombre,auxHoras,auxSueldo);
			}
		}
		retorno=0;
	}

	return retorno;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    int retorno=-1;
    int opcion;
    if(pArrayListEmployee!=NULL)
    {
    	if(!utn_getNumero(&opcion,
    			"\n1.Ordenar por id"
    			"\n2.Ordenar por nombre"
    			"\n3.Ordenar por horas trabajadas"
    			"\n4.Ordenar por sueldo"
    			"\nIngrese opcion:", "\nError,opcion no valida", 1, 4, 3))
    	{
    		switch(opcion)
    		{
    		case 1:
    			ll_sort(pArrayListEmployee, employeeCmpId, 0);
    			printf("\nLos empleados fueron ordenados por id");
    		 break;
    		case 2:
    			ll_sort(pArrayListEmployee, employeeCmpNombre, 0);
    			printf("\nLos empleados fueron ordenados por nombre");
    		 break;
    		case 3:
    			ll_sort(pArrayListEmployee, employeeCmpHoras, 0);
				printf("\nLos empleados fueron ordenados por horas trabajadas");
    		 break;
    		case 4:
    			ll_sort(pArrayListEmployee, employeeCmpSueldo, 0);
				printf("\nLos empleados fueron ordenados por sueldo");
    		 break;
    		}
    	}
    	retorno=0;
    }
    return retorno;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee)
{
	int retorno=-1;
	int i;
	FILE* fpArchivo;
	Employee* auxEmpleado;

	int auxId;
	char auxNombre[NOMBRE_TAM];
	float auxHoras;
	float auxSueldo;


	if(pArrayListEmployee!=NULL && path!=NULL)
	{
		fpArchivo=fopen(path,"w");
		if(fpArchivo!=NULL)
		{
			retorno=0;
			for(i=0;i<ll_len(pArrayListEmployee);i++)
			{
				auxEmpleado=(Employee*)ll_get(pArrayListEmployee,i);

				if(!employee_getId(auxEmpleado,&auxId) &&
				   !employee_getNombre(auxEmpleado, auxNombre) &&
				   !employee_getHorasTrabajadas(auxEmpleado,&auxHoras) &&
				   !employee_getSueldo(auxEmpleado, & auxSueldo))
				{
					fprintf(fpArchivo,"%d,%s,%f,%f\n",auxId,auxNombre,auxHoras,auxSueldo);
				}
			}
			fclose(fpArchivo);
		}
	}

	return retorno;
}

/** \brief Guarda los datos de los empleados en el archivo data.bin (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee)
{
	int retorno=-1;
	FILE* fpArchivo;
	Employee* auxEmpleado;


	if(path!=NULL && pArrayListEmployee!=NULL)
	{
		fpArchivo=fopen(path,"wb");
		if(fpArchivo ==NULL)
		{
			printf("\nNo se pudo abrir el archivo");
		}
		else
		{
			for(int i=0;i<ll_len(pArrayListEmployee);i++)
			{
				auxEmpleado=(Employee*)ll_get(pArrayListEmployee,i);
				fwrite(auxEmpleado,sizeof(Employee),1,fpArchivo);
			}
		}
		fclose(fpArchivo);
		retorno=0;
	}
	return retorno;
}

int buscarMayorId(LinkedList* pArrayListEmployee,int* id)
{
    int todoOk=0;
    Employee* auxEmp=NULL;
    int mayor;
    if(pArrayListEmployee!=NULL)
    {
        for(int i=0;i<ll_len(pArrayListEmployee);i++)
        {
            auxEmp=(Employee*)ll_get(pArrayListEmployee,i);
            if(i==0 || auxEmp->legajo> mayor)
            {
                mayor=auxEmp->legajo;
            }
        }
        *id=mayor+1;

        todoOk=1;
    }
    return todoOk;
}

